**Instructions for Interpreting Git Diff Output**

This document provides a guide to understanding the diff output generated by RepoDiff.

**Important Note:** The diff output in `repodiff_output.txt` has been sanitized to focus what's relevant for understanding the diffs.
Real-world Git diff output may contain more details.

**1. Basic Structure:**

A Git diff file describes the *differences* between two versions of a file. It's structured into *hunks*, which represent contiguous regions of change.

*   `diff --git a/<path> b/<path>`:  Indicates the file being compared. `a/` refers to the "old" version, and `b/` refers to the "new" version.
*   `--- a/<path>`:  Marks the beginning of the original file content.
*   `+++ b/<path>`: Marks the beginning of the modified file content.
*   `@@ -<start_line_old>,<num_lines_old> +<start_line_new>,<num_lines_new> @@ <section_header>`: This is the *hunk header*. (Optional in simplified output, but common in real diffs).
    *   `-<start_line_old>,<num_lines_old>`: Indicates the starting line number and number of lines in the *old* version of the file that this hunk represents.  If only one line is affected, `,<num_lines_old>` will be omitted.
    *   `+<start_line_new>,<num_lines_new>`: Indicates the starting line number and number of lines in the *new* version of the file that this hunk represents.  If only one line is affected, `,<num_lines_new>` will be omitted.
    *   `<section_header>`:  (Optional) This is often a function or method name, providing context for the change.
*   Hunk Content:  Lines within a hunk are marked with a prefix:
    *   ` ` (space):  Unchanged line (context).
    *   `-`: Line removed from the old version.
    *   `+`: Line added to the new version.

**2. Simplified Example:**

```
diff --git a/MyFile.cs b/MyFile.cs
--- a/MyFile.cs
+++ b/MyFile.cs 
 // Some code
 string oldValue = "old";
-// Removed line
+string newValue = "new";
 // More code
```

**Explanation of the Example:**

*   The file being changed is `MyFile.cs`.
*   `" string oldValue = "old";"`:  This line is present in both versions.
*   `-// Removed line`: This line was removed from the old version.
*   `+string newValue = "new";`: This line was added to the new version.
*   `" // More code"`: This line is present in both versions.

**3. Key LLM Considerations:**

*   **Focus on Content Lines:** The most important part for understanding changes is the content prefixed with ` `, `-`, or `+`.
*   **Context is Crucial:** Use the surrounding unchanged lines to understand the *purpose* of the change.
*   **File Paths:**  Pay attention to the file paths (`a/<path>`, `b/<path>`) to understand which files are being modified.

**4. Application to your File:**

*   **".cs" Files:**  Changes to C# source code.  Focus on the addition (`+`) and removal (`-`) of code lines to understand logic changes.
*   **"Test*.cs" Files:** Changes to unit test files.  These are often important for understanding how the functionality is being tested and whether the changes are robust.
*   **".xml" Files:**  Changes to configuration or data files. Look for added, removed, or modified XML elements and attributes. Focus is usually on changes to properties.

**5. Special Instructions for File Types based on the given filters:**

* `.cs` code is assumed to not contain test code
* `*Test*.cs` contain test code, which should be helpful for understanding functionality.
* `*.xml` contains configuration.

By focusing on these key elements, you can effectively extract meaningful information from Git diff output and summarize the changes made in a software project.
